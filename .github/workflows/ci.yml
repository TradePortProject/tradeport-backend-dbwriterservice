# .github/workflows/cd.yml

name: CD - Stage 1 - Deploy to DockerHub

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Combine Build, Test, and Sonar Analysis into one job
  build_and_scan:
    name: Build, Test, and Analyze
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        # Required for SonarQube PR analysis to fetch git history
        with:
          fetch-depth: 0

      - name: Set Up Java and Maven
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven' # Optional: Cache Maven dependencies

      # Build, package, run tests, AND prepare for Sonar analysis in one command
      # The verify goal runs phases up to 'verify' (includes compile, test, package)
      # The sonar:sonar goal performs the analysis using the Maven plugin
      # Run the command on a single line to avoid shell parsing issues with line breaks
      - name: Build, Package, Test, and Analyze
        run: mvn verify sonar:sonar -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        env:
          # Required by SonarCloud for Pull Request decoration / analysis
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Token for authenticating with SonarCloud
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Optional: Verify compiled classes exist (useful for debugging)
      - name: Verify Compiled Classes Exist
        run: |
          echo "Checking for compiled Java classes in target/classes..."
          ls -l target || echo "INFO: target/ directory might not exist if build failed."
          ls -l target/classes || echo "WARNING: target/classes directory is missing!"
          # Use find and check exit code to avoid workflow error if no files found
          find target/classes -name "*.class" > /dev/null 2>&1
          if [ $? -ne 0 ]; then
            echo "WARNING: No compiled class files found in target/classes!"
          else
            echo "INFO: Compiled class files found."
          fi

  deploy:
    name: Build and Deploy Docker Image
    runs-on: ubuntu-latest
    needs: build_and_scan # Depends on the previous job
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only run on push to main
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Download the application JAR artifact from the previous job
      - name: Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: java-app-jar # Name of the artifact to download
          # Download it into a 'target' directory so the Dockerfile COPY command works
          path: target/

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Optional: Keep manual install or use an action
      - name: Install Docker Compose
        run: |
          mkdir -p ~/.docker/cli-plugins
          curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
          echo "~/.docker/cli-plugins" >> $GITHUB_PATH # Add compose to PATH
          docker compose version

      - name: Verify `docker-compose.yml` and downloaded JAR
        run: |
          echo "Checking for docker-compose.yml..."
          ls -l ./docker-compose.yml || (echo "ERROR: docker-compose.yml not found!" && exit 1)
          echo "Checking for downloaded JAR in target/..."
          ls -l target/ || (echo "ERROR: target/ directory or JAR not found after download!" && exit 1)
          ls -l target/*.jar || (echo "ERROR: JAR file not found in target/ directory!" && exit 1)


      # Use the dedicated action for login - more secure and robust
      - name: Log In to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }} # Ensure secret names match your repo settings
          password: ${{ secrets.DOCKERHUB_TOKEN }}    # Ensure secret names match your repo settings

      - name: Build and Push Docker Image using Docker Compose
        run: |
          echo "Building images..."
          docker compose -f docker-compose.yml build
          echo "Pushing images..."
          docker compose -f docker-compose.yml push



